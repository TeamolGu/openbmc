From 68213fbda0f00273fbba5f7d294f6768108f27b6 Mon Sep 17 00:00:00 2001
From: IHAD <Cunjin.Tao@luxshare-ict.com>
Date: Tue, 6 Dec 2022 20:43:07 -0800
Subject: [PATCH 1/1] Add support for NonRecoverable alarms for sel-logger

---
 include/threshold_event_monitor.hpp | 39 +++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/include/threshold_event_monitor.hpp b/include/threshold_event_monitor.hpp
index cd5397a..2ca5830 100644
--- a/include/threshold_event_monitor.hpp
+++ b/include/threshold_event_monitor.hpp
@@ -25,8 +25,10 @@ enum class thresholdEventOffsets : uint8_t
 {
     lowerNonCritGoingLow = 0x00,
     lowerCritGoingLow = 0x02,
+    lowerNonRecoGoingLow = 0x04,
     upperNonCritGoingHigh = 0x07,
     upperCritGoingHigh = 0x09,
+    upperNonRecoGoingHigh = 0x0B,
 };
 
 static constexpr const uint8_t thresholdEventDataTriggerReadingByte2 = (1 << 6);
@@ -99,6 +101,11 @@ inline static sdbusplus::bus::match::match startThresholdAssertMonitor(
             eventData[0] = static_cast<uint8_t>(
                 thresholdEventOffsets::lowerNonCritGoingLow);
         }
+        else if (event == "NonRecoverableAlarmLow")
+        {
+            eventData[0] =
+                static_cast<uint8_t>(thresholdEventOffsets::lowerNonRecoGoingLow);
+        }
         else if (event == "WarningAlarmHigh")
         {
             eventData[0] = static_cast<uint8_t>(
@@ -108,6 +115,10 @@ inline static sdbusplus::bus::match::match startThresholdAssertMonitor(
         {
             eventData[0] =
                 static_cast<uint8_t>(thresholdEventOffsets::upperCritGoingHigh);
+        }else if (event == "NonRecoverableAlarmHigh")
+        {
+            eventData[0] =
+                static_cast<uint8_t>(thresholdEventOffsets::upperNonRecoGoingHigh);
         }
         // Indicate that bytes 2 and 3 are threshold sensor trigger values
         eventData[0] |= thresholdEventDataTriggerReadingByte2 |
@@ -234,6 +245,20 @@ inline static sdbusplus::bus::match::match startThresholdAssertMonitor(
                 redfishMessageID += ".SensorThresholdWarningLowGoingHigh";
             }
         }
+        else if (event == "NonRecoverableLow")
+        {
+            threshold = "nonrecoverable low";
+            if (assert)
+            {
+                direction = "low";
+                redfishMessageID += ".SensorThresholdNonRecoverableLowGoingLow";
+            }
+            else
+            {
+                direction = "high";
+                redfishMessageID += ".SensorThresholdNonRecoverableLowGoingHigh";
+            }
+        }
         else if (event == "WarningHigh")
         {
             threshold = "warning high";
@@ -262,6 +287,20 @@ inline static sdbusplus::bus::match::match startThresholdAssertMonitor(
                 redfishMessageID += ".SensorThresholdCriticalHighGoingLow";
             }
         }
+        else if (event == "NonRecoverableHigh")
+        {
+            threshold = "nonrecoverable high";
+            if (assert)
+            {
+                direction = "high";
+                redfishMessageID += ".SensorThresholdNonRecoverableHighGoingHigh";
+            }
+            else
+            {
+                direction = "low";
+                redfishMessageID += ".SensorThresholdNonRecoverableHighGoingLow";
+            }
+        }
 
         std::string journalMsg(std::string(sensorName) + " sensor crossed a " +
                                threshold + " threshold going " + direction +
-- 
2.17.1

